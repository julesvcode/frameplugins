---

export interface Props {
  action?: string,
  buttonWidth: "fill" | "fit",
}

const { action = "/", buttonWidth = 'fit' } = Astro.props;
const makeWebhook = import.meta.env.MAKE_WEBHOOK;

const buttonClass = buttonWidth === "fill"
    ? "w-full"
    : "w-fit"

---

<form id="signup-form" class="flex gap-2 flex-wrap">
    <input 
        type="email" 
        name="email" 
        placeholder="Enter your email address"
        required
        class="max-w-80 text-zinc-950 font-regular border border-zinc-200 text-sm leading-0 rounded-md w-60 py-2 px-4" 
    />
    <button
        class={`bg-zinc-800 text-zinc-100 font-medium text-sm leading-0 rounded-md py-2 px-4 cursor-pointer hover:opacity-80 ${buttonClass}`}
    >
        Subscribe
    </button>
</form>

<script define:vars={{ makeWebhook, action }}>
    const form = document.getElementById('signup-form');
    const errorMessage = document.getElementById('error-message');
  
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = form.email.value;
      
      try {
        const response = await fetch(makeWebhook, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email }),
        });
  
        if (!response.ok) {
          throw new Error('Failed to send data to the webhook');
        }
  
        // Redirect after successful submission
        window.location.href = action;
        
      } catch (error) {
        errorMessage.textContent = error.message;
        errorMessage.classList.remove('hidden');
      }
    });
  </script>