---
import ButtonPrimary from '../components/ButtonPrimary.astro';
import GoalCard from '../components/GoalCard.astro';
import CategoryCard from '../components/CategoryCard.astro';
import ToolCard from '../components/ToolCard.astro';
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';


const allTools = await getCollection("tools");

const allCategories = [...new Set(allTools.map((tool) => tool.data.categories).flat())];
const allTopics = [...new Set(allTools.map((tool) => tool.data.topics).flat())];


const mainTopics = allTools.map((tool) => tool.data.topics).flat()
const processedTopics = mainTopics.reduce((acc, topic) => {
    const value = acc[topic] || 0

    return {
        ...acc,
        [topic]: value + 1
    }
}, {})

let categoryDisplay
let topicDisplay

const errors = { email: ""}

if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData()
		const email = data.get("email")
		if (typeof email !== "string") {
			errors.email += "Email is not valid."
		}

		const makeWebhook = import.meta.env.MAKE_WEBHOOK;
		// Send data to the Make webhook
		const response = await fetch(makeWebhook, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({ email }), // Sending the email as JSON
		});

		if (!response.ok) {
			throw new Error("Failed to send data to the webhook");
		}

		// After successful form submission, redirect to another page or the same page
		return new Response(null, {
			status: 302,
			headers: {
				Location: "/",
			},
		});

	} catch (error) {
		if (error instanceof Error) {
			console.log(error.message)
		}
	}
}


---

<BaseLayout
	title=""
	description="All the tools you need to launch ,grow and monetize your newsletter.">
		<section class="w-full flex gap-4 pt-8 pb-16">
			<div class="flex flex-col md:basis-2/3 gap-4">
				<h1>All the tools you need to 
					<span class="relative">
						<span class="absolute w-full bg-blue-500 right-0 bottom-1 h-3 -rotate-1 opacity-50 -z-10"></span>
						launch
					</span>,
					<span class="relative">
						<span class="absolute w-full bg-blue-500 right-0 bottom-1 h-3 -rotate-1 opacity-50 -z-10"></span>
						grow
					</span> and
					<span class="relative">
						<span class="absolute w-full bg-blue-500 right-0 bottom-1 h-3 -rotate-1 opacity-50 -z-10"></span>
						monetize
					</span>your newsletter.
				</h1>
				<p class="max-w-md text-lg">Discover a curated list of tools, apps and software to help you run your newsletter like a pro.</p>
				<form method="POST">
					<input 
						type="email" 
						name="email" 
						placeholder="Get our monthly newsletter"
						required
						class="text-zinc-950 font-regular text-sm leading-0 rounded-md w-60 py-2 px-4" 
					/>
					{errors.email && <p>{errors.email}</p>}
					<button
						class="bg-zinc-800 text-zinc-100 font-medium text-sm leading-0 rounded-md w-fit py-2 px-4 cursor-pointer hover:opacity-80"
					>
						Subscribe
					</button>
				</form>
			</div>
		</section>
		<section>
			<h2 class="">
				<span class="relative">
					<span class="absolute w-full bg-blue-500 right-0 bottom-1 h-2 -rotate-1 opacity-50 -z-10"></span>
					Top
				</span>
				Categories
			</h2>
			<div class="grid grid-col-1 sm:grid-cols-2 md:grid-cols-3 gap-6 pt-4">
				{allTopics.map((topic) =>
					(topicDisplay = (topic.charAt(0).toUpperCase() + topic.slice(1)).replace(/-/g, ' ')) &&
					<GoalCard 
						icon={topic}
						link={`/${topic}`}
						title={topicDisplay}
						quantity={processedTopics[topic]}
					/>
				)}
			</div>
		</section>
		<section>
			<div class="group flex items-end justify-between">
				<h2 class="">
					<span class="relative">
						<span class="absolute w-full bg-blue-500 right-0 bottom-1 h-2 -rotate-1 opacity-50 -z-10"></span>
						Featured
					</span>
					Tools
				</h2>
				<a href="/browse"
					class="text-sm hover:underline"
				>
					View all →
				</a>
			</div>
			<div class="grid grid-col-1 sm:grid-cols-2 md:grid-cols-3 gap-6 pt-4">
				{allTools.map((tool) => 
					(tool.data.feat === "true") && 
						<ToolCard tools={tool} />
				)}
			</div>
		</section>
		<section id="categories">
			<div class="group flex items-end justify-between">
				<h2>
					<span class="relative">
						<span class="absolute w-full bg-blue-500 right-0 bottom-1 h-2 -rotate-1 opacity-50 -z-10"></span>
						All
					</span>
					Categories
				</h2>
				<a href="/categories"
					class="text-sm hover:underline"
				>
					View all →
				</a>
			</div>
			<div class="grid grid-col-1 sm:grid-cols-2 md:grid-cols-3 gap-6 pt-4">
				{allCategories.map((category) =>
					(categoryDisplay = (category.charAt(0).toUpperCase() + category.slice(1)).replace(/-/g, ' ')) &&
					<CategoryCard 
						link={category}
						category={categoryDisplay}
					/>
				)}
			</div>
		</section>
</BaseLayout>


