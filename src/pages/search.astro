---
import { getCollection } from "astro:content";
import ToolCard from "../components/ToolCard.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import SearchWidget from "../components/SearchWidget.astro";

const allPlugins = await getCollection("plugins");
---

<BaseLayout
  title="Search plugins"
  description="Browse all the best Framer plugins you need to supercharge your website."
>
  <section class="w-full flex gap-4">
    <div class="flex flex-col md:basis-2/3 gap-4">
      <h1>Search all Framer plugins</h1>
      <p class="text-lg">
        Search for a plugin name, a plugin category or even a just keyword to find a specific Framer plugin.
      </p>
    </div>
  </section>
  <!-- <SearchWidget /> -->
  <aside class="w-full sm:w-fit">
    <div class="relative">
      <div class="absolute top-3 left-2 text-zinc-700">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 256 256"><path d="M232.49,215.51,185,168a92.12,92.12,0,1,0-17,17l47.53,47.54a12,12,0,0,0,17-17ZM44,112a68,68,0,1,1,68,68A68.07,68.07,0,0,1,44,112Z"></path></svg>
      </div>
      <input 
          type="search" 
          required 
          minlength="2" 
          maxlength="24" 
          name="search" 
          id="search" 
          placeholder="Search for plugins.."
          class="w-full bg-zinc-200 border border-zinc-300 rounded-md py-2 pl-8 pr-3 text-sm text-zinc-900 placeholder-zinc-500"
      />
    </div>
  </aside>
  <span class="italic" id="searchReadout"></span class="italic">
  <section aria-label="Search results">
    <div id="searchResults" class="grid grid-col-1 sm:grid-cols-2 md:grid-cols-3 gap-6 pt-4">
    </div>
  </section>
</BaseLayout>

<script>
  import Fuse from "fuse.js"

  let SEARCH_DATA
  let FUSE_INSTANCE
  const FUSE_OPTIONS = {
    includeScore: true,
    shouldSort: true,
    threshold: 0.5,
    keys: [
      {
        name: "title",
        weight: 1,
      },
      {
        name: "description",
        weight: 0.75,
      }
    ]
  }

  const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#FFFFFF" viewBox="0 0 256 256" id="spinner"><path d="M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"></path>
    <style>
      #spinner {
      animation: spin 1s linear infinite;
      }
      @keyframes spin {
      100% {
        transform: rotate(360deg);
      }}
      </style></svg>`

  const search = document.querySelector("#search") as HTMLInputElement
  const searchReadout = document.querySelector("#searchReadout") as HTMLInputElement
  const resultsList = document.querySelector("#searchResults") as HTMLInputElement
  
  function updateDocumentTitle(search) {
    document.title = search
      ? `Search results for "${search}"`
      : "Search pugins"  
  }

  function updateDocumentReadout(search) {
    searchReadout.textContent = search
      ? `Search results for "${search}"`
      : ""  
  }

  function updateSearchPageURL(search) {
    const url = new URL(window.location.href)
    url.searchParams.set("q", search)
    window.history.replaceState(null, "", url)
  }

  function generateSearchList(results) {
    return results.map((r) => {
      const { title, description, categories, slug } = r.item
      return `
        <a
          href="/plugins/${slug}"
          class="relative flex flex-col gap-8 group overflow-hidden p-8 rounded-lg bg-zinc-100 border border-zinc-200 w-full cursor-pointer hover:border-zinc-300 hover:bg-opacity-80"
        >
          <div class="flex flex-col gap-0 w-full">
            <div class="flex items-center gap-2">
              <h3 class="text-zinc-950 font-bold leading-8">
                ${title}
              </h3>
            </div>
            <p class="text-zinc-700 text-base leading-7 line-clamp-2">
              ${description}
            </p>
          </div>
          <div class="flex gap-2 items-center justify-between">
            <p class="flex gap-1 items-center text-zinc-700 text-xs leading-0 bg-zinc-100 border border-zinc-200 rounded w-fit py-1 px-2">
              ${categories[0]} 
            </p>
          </div>
        </a>
      `
    }).join("")
  }

  async function fetchSearchResults(search) {
    if (search.length === 0) return
    resultsList.innerHTML = SPINNER

    if (!SEARCH_DATA) {
      try {
      const res = await fetch("/search.json")
      if (!res.ok) {
        throw new Error("Something went wrong.. please try again")
      }
      const data = await res.json()
      SEARCH_DATA = data
      } catch (error) {
        console.error(error)
      }
    }

    if (SEARCH_DATA && !FUSE_INSTANCE) {
      FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS)
    }

    if (!FUSE_INSTANCE) return
    const searchResult = FUSE_INSTANCE.search(search)
    resultsList.innerHTML = searchResult.length > 0 
      ? generateSearchList(searchResult)
      : "No results found"
  }
  

  window.addEventListener("DOMContentLoaded", () => {
    const urlParams = new URLSearchParams(window.location.search).get("q")
    if (urlParams) {
      fetchSearchResults(urlParams)
      updateDocumentTitle(urlParams)
      updateDocumentReadout(urlParams)
      search.value = urlParams
      search.focus()
    }
  })

  search.addEventListener("input", () => {
    const searchTerm = search.value
    if (searchTerm) {
      updateDocumentTitle(searchTerm)
      updateDocumentReadout(searchTerm)
      fetchSearchResults(searchTerm)
      updateSearchPageURL(searchTerm)
    }
  })
</script>